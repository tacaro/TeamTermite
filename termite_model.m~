%{
Initialize landscape for Doak-Peleg rotation project with
Liam Friar, Jack Gugel, Ellen Waddle, and Tristan Caro.

Landscape is a square grid. Agents can move at a finer scale.
Each point on grid stores visitation/dung count, current grass quantity,
nutritional quality.
Location of termite mounds or fertilization patches will be an initial
input, and initial attributes of grid points will be determined from those
inputs.

Note: x dimension refers to column, and y dimension to row. X dimension
increases left to right, Y dimension top to bottom.
%}

%{
Sections:
     - Define Parameters
     - Model Script
     - Model Vizualization (defunct)
     - Export Metadata
%}


%% DEFINE PARAMETERS:
% Cleanup the workspace
clearvars
close all

% Non-mutable parameters
visualize = false; % keep off to save runtime
truncate_trajectories = true; % truncate rows (steps) of trajectories array that no animals reached

num_animals = 1000; % Number of animals to run? (integer)
steps = 500; % Max steps that each animal is allotted? (integer)
landscape_ID = "plot7_79105421";

% Grazing parameters
feed_time = 1; %relative to total movement time (of 1). Affects how dung distributes
max_feed = 5; %max amount can feed per turn
    
% Movement angle/dist parameters.
% angles are circular normal from vmrand(mean, var)
% distances are gamma distribution from gamrnd(shape, scale) < max_run
tum_turn_mean = pi; % mean tumble
tum_turn_var = 2; % fKappa tumble
tum_dist_shape = 1;
tum_dist_scale = 2;
run_turn_mean = 0; % mean run 
run_turn_var = 2; % fKappa run
run_dist_shape = 2; 
run_dist_scale = 2;
max_run = 8; % maximum run length

% Parameters for decision-making
n_memories = 3; % n of steps that animal remembers (for tumble decision)
tumble_food = 0.6 * max_feed;
stop_food = 0.8 * max_feed; % Used in check_path iff able2stop == TRUE
able2stop = false; % If true, animals will stop, feed, and end step if they cross a good patch.   

% Create run_ID based off of user-defined parameters
% in the format {mean tumble}{fKappa tumble}{mean run}{fKappa
% run}{n_memories}
% where decimals are rounded to nearest integer
run_ID = strcat(num2str(round(tum_turn_mean)), "_", num2str(tum_turn_var), "_", num2str(run_turn_mean), "_", num2str(run_turn_var), "_", num2str(n_memories));



%% Load landscape
grass_filename = strcat(landscape_ID, "_grass.csv");
% nutrition_filename = strcat(landscape_ID, "_nutrition.csv");
% dung_filename = strcat(landscape_ID, "_dung.csv");

grass_initial = readmatrix(grass_filename);
% nutrition_initial = readmatrix(nutrition_filename);
% dung_initial = readmatrix(dung_filename);

xdim = size(grass_initial, 2); % the model uses these parameters
ydim = size(grass_initial, 1);
max_grass = max(max(grass_initial));
nutrition_initial = grass_initial/max_grass;
dung_initial = zeros(ydim, xdim);
landscape = cat(3, grass_initial, nutrition_initial, dung_initial);

% Preallocate dataframe to track landscape over time
% landscape_before_run = landscape; % take snapshot of first frame for later reference 
landscape_over_time = zeros(xdim, ydim, steps);
dung_over_time = zeros(xdim, ydim, steps);

%%
% STEP 2: agents move through landscape.

% Record trajectory of all animals. First three columns are first animal,
% fourth through sixth columns are second animal, etc. x, y coords then
% food consumed at that step.

% Trajectories are saved as xpos, ypos, grass_consumed, run (1) or tumble (0) for each agent.
% Note that the first grass_consumed value for each animal will remain nan
% and final run-tumble value for each animal will remain nan.
trajectories = nan(steps + 1, 4*num_animals);
curr_location = zeros(1,2);
memory = nan(n_memories, 1);

for animal = 1:num_animals
    % Take snapshot of landscape, append to landscape_over_time
    landscape_over_time(:, :, animal) = landscape(:,:,1);
    dung_over_time(:,:,animal) = landscape(:,:,3);

    % Movement loop
    animal_x = 4*animal - 3;%These are for indexing trajectories array
    animal_y = animal_x + 1;
    animal_z = animal_x + 2;
    animal_zz = animal_x + 3;

    % Random starting position on perimeter of landscape:
    % Pick x or y to start on, other var is 1 or max.
    A = [1, xdim];
    astart = A(randi(length(A), 1));
    bstart = randi(xdim);
    starting_pos = [astart,bstart ; bstart,astart ];
    start_pos = starting_pos(:,randi(2,1));

    % Set starting directions.
    if start_pos(1) == 1
        direction = (-pi/2) + (pi*rand);
    elseif start_pos(1) == xdim
        direction = (pi/2) + (pi*rand);
    elseif start_pos(2) == 1
        direction = -(pi*rand);
    elseif start_pos(2) == xdim
        direction = (pi*rand);
    else
        disp("Something is wrong with starting direction, exiting script!");
        return
    end

    trajectories(1, animal_x : animal_y) = [start_pos];
    %initialize. Goes to 1 when animal leaves boundary on landscape.
    leave = 0;
    memory(:) = nan(1,n_memories);
    %memory(1) is most recent, (n_memories) least recent.
    

    for t=1:steps

        curr_location = trajectories(t, animal_x : animal_y);
        x1 = curr_location(1);
        y1 = curr_location(2);
        [grass_quantity, nutrition] = current_location(landscape,x1, y1);
        
        %do we use food here any more? I wasn't sure but didn't want to
        %delete.
        food_here = round(grass_quantity * nutrition * max_feed / max_grass, 1);

% Decide on movement strategy and calculate next location

        % Choose turn size & movement distance
        %  decision to tumble is a fct of memory, which = food consumed. 
        % memory is just how much food was eaten the last N time steps
        recent_memory = nanmean(memory);

        % If we want to weight nutrition even further, could * by
        % nutrition again at current location: 

        % This is where the run vs tumble decision is made
        if recent_memory > tumble_food % TUMBLE
            turning_angle = vmrand(tum_turn_mean, tum_turn_var, 1); % Circular normal. vmrand(mean, var, n)
            d = min(gamrnd(tum_dist_shape, tum_dist_scale, 1),max_run); % Gamma. shape = 1, scale =2. max=max_run
            trajectories(t, animal_zz) = 0; 
        else % RUN 
            turning_angle = vmrand(run_turn_mean, run_turn_var, 1); %vmrand(mean, var, n)
            d = min(gamrnd(run_dist_shape, run_dist_scale, 1),max_run); %gamma. shape = 2, scale =2
            trajectories(t, animal_zz) = 1;
        end

        
        % Agent moves
        direction = rem(direction + turning_angle, (2*pi)); % Take remainder so always between [-2*pi, 2*pi]
        x2 = x1+d*cos(direction);
        y2 = y1+d*sin(direction);

        
        % Update landscape and trajectories array
        % returned x2 and y2 will be different from inputs if animal crossed
        % landscape boundary or crossed a good patch and stopped (if able2stop).
        [landscape, grass_consumed, nutrition, x2, y2, leave] = ...
            move_and_feed_1(landscape, x1, y1, x2, y2, max_feed, max_grass, feed_time, stop_food, able2stop);
        if leave == 1
            break
            % Ends "t" loop. returns to "animal" loop.
        end
        trajectories(t+1, animal_x : animal_y) = [x2, y2]; % update location
        trajectories(t+1, animal_z) = grass_consumed;
        memory(2:end) = memory(1:(n_memories-1)); % update memory
        memory(1) = grass_consumed;
   
        
    end  % t (step) loop
end % animal loop


% Shorten trajectories array for steps that no animals reached (save memory)
if truncate_trajectories
    longest_trajectory = 0;
    last_step = 1;
    traj_ii = 0;
    for trajectories_animal =  1 : num_animals
        traj_ii = trajectories_animal * 4 - 3;
        if ~isnan(trajectories(steps+1, traj_ii))
            last_step = steps + 1;
            break
        else
            animal_last_step = find(isnan(trajectories(:, traj_ii)), 1) - 1;
            if animal_last_step > last_step
                last_step = animal_last_step;
            end
        end
    end
    trajectories(last_step + 1 : steps + 1, :) = [];
end



%% Visualization -- commented out so the script runs faster
% to un-comment, highlight this section and press cmd-T
% if visualize
% % Quantity Plot
%     figure, surf(landscape(:,:,1));
%     hold on
%     zz =transpose(linspace(100,100,length(trajectories(:,2))));
%     for animal = 1:num_animals
%         xx = 4*animal - 3;
%         yy = xx + 1;
%         plot3(trajectories(:,xx,1), trajectories(:,yy,1),zz)
%     end
%     title('ending landscape grass quantity values');
%     hold off
% 
% % Nutrition Plot
%     figure, surf(landscape(:,:,2));
%     hold on
%     zz =transpose(linspace(100,100,length(trajectories(:,2))));
%     for animal = 1:num_animals
%         xx = 4*animal - 3;
%         yy = xx + 1;
%         plot3(trajectories(:,xx,1), trajectories(:,yy,1),zz)
%     end
%     title('ending landscape nutrition values');
%     hold off
% 
% 
% % Dung Plot
%     figure, surf(landscape(:, :, 3));zz =transpose(linspace(100,100,length(trajectories(:,2))));
%     hold on
%     for animal = 1:num_animals
%         xx = 4*animal - 3;
%         yy = xx + 1;
%         plot3(trajectories(:,xx,1), trajectories(:,yy,1),zz)
%     end
%     title('dung location pileups');
%     hold off
% end

%% Residency File Creation

landscape_time_bi = landscape_over_time;
landscape_time_bi=landscape_time_bi > 50;

% Reshape the trajectories matrix to be 3D matrix
% where there are 4 columns: x, y, and fullness, run vs tumble
% each flat matrix represents a single animal.
traj = reshape(trajectories, steps+1, 4, num_animals);

% Initialize residency tracking matrix
residency = zeros(num_animals, 2);

for page = 1:size(traj, 4) % for every page [animal traj] in the 3d matrix

    for line = 1:size(traj, 1) % for every line [coord pair] in the page
        x = traj(line, 1, page); % note the x coord
        y = traj(line, 2, page); % note the y coord
        if isnan(x) || isnan(y) % if the x or y coordinates are NaN
            continue % skip this iteration
        end
        if landscape_over_time(round(x),round(y)) > 50 % if the x,y coords of landscape are in TRUE (high nutrient)
            residency(page, 2) = residency(page, 2) + 1; % add one to the value
        %elseif landscape_over_time(round(x),round(y)) == 0 % else if x,y are in FALSE (low nutrient)
           %residency(page, 2) = residency(page, 2) + 0; % add zero the the value
        end
    end

end

for line = 1:size(residency,1) % for each line in the residency file
    residency(line, 1) = line; % write the animal_id
end

for line = 1:size(residency,1) % for each line in the residency file
    % in the third column, note the run length of the animal in the third
    % column.
    residency(line, 3) = sum(~isnan(traj(:,1,line)));
end

%% Data Export
% Create a hash key that is unique to this simulation run
% The key is current datetime + two random AZ characters
STRnum_animals = num2str(num_animals); % make a string version for data export
STRsteps = num2str(steps); % make a string version for data export
now = num2str(fix(clock));
now = now(~isspace(now));
run_ID = strcat(now, randsample(char(97:122), 2));
mkdir(['dfs/' run_ID]);


% Create a "basename" so that all exported csvs share a common format, in
% the same folder. 'dfs/' folder is required to exist.
basename = strcat('dfs/', run_ID, "/", fertilizer_pattern, "_", STRsteps, "_", STRnum_animals, "_");
%basename = strcat('dfs/', "_", run_ID, "_", fertilizer_pattern, "_",  )
% Output metadata file
    % Create a cell array containing useful simulation parameters
    MTDA = {'run_ID', run_ID;
            'fertilizer_pattern', fertilizer_pattern;
            'mound_radius', mound_radius;
            'xdim', xdim;
            'ydim', ydim;
            'boundary', boundary;
            'n_mounds', n_mounds;
            'max_grass', max_grass;
            'max_feed', max_feed;
            'food_ratio', food_ratio;
            'num_animals', num_animals;
            'steps', steps;
            'able2stop', able2stop;
            'run4ever', run4ever;
            'random_walk', random_walk;
            'n_memories', n_memories;
            'max_tumble', max_tumble;
            'max_run', max_run;
            'grass_consumed', grass_consumed;};
            
      MTDA = cell2table(MTDA, 'VariableNames', {'parameter', 'value'});
      writetable(MTDA, strcat(basename, 'metadata.csv'));

% Output .csv files
    disp("Saving files . . .")
    disp(strcat("This run's identifier is:", run_ID));
    writematrix(residency, strcat(basename, 'residency.csv')); % residency time, in ticks
    writematrix(trajectories, strcat(basename, 'trajectories.csv')); % trajectories
    writematrix(fertilizer_xy, strcat(basename, 'fertilizer_locations.csv')); %fertilizer locations
    writematrix(landscape(:,:,1), strcat(basename, 'quantity_end.csv')); % quantity
    writematrix(landscape(:,:,2), strcat(basename, 'nutrition_end.csv')); % nutrition
    writematrix(landscape(:,:,3), strcat(basename, 'dung_end.csv')); % dung
    %writematrix(landscape_before_run(:,:,1), strcat(basename, 'quantity_start.csv')); % quantity at start
    %writematrix(landscape_before_run(:,:,2), strcat(basename, 'nutrition_start.csv')); % nutrition at start
    %writematrix(landscape_before_run(:,:,3), strcat(basename, 'dung_start.csv')); % dung at start

% In order to export the three dimensional landscape_over_time matrix in a way that makes sense
% I'm going to export it as a two dimensional matrix with each slice pasted
% below the proceeding one.
dynamic_landscape = permute(landscape_over_time, [1 3 2]);
dynamic_landscape = reshape(dynamic_landscape, [], size(landscape_over_time, 2), 1);
writematrix(dynamic_landscape, strcat(basename, 'dynamic_landscape.csv'));

disp("All files saved successfully!")

% Done :)